import operator
import os

configfile: "config.json"

SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)

INPUT_READS = config.get("reads", "input.fofn")
CELERA_SPEC = config.get("celera_spec", "%s/../celera/pacbio.local_human.spec" % SNAKEMAKE_DIR)
CHROMOSOME_LENGTHS = config.get("reference_index", "%s.fai" % config["reference"])

# Get a sample .bax.h5 file from the given list of input reads.
with open(INPUT_READS, "r") as fh:
    BAS_TEMPLATE = next(fh).strip()

# By default delay jobs for a random amount of time up to this value to prevent
# too much I/O from simultaneous assemblies.
DEFAULT_MAX_DELAY = 1

# User-defined file of alignments with one absolute path to a BAM per line.
ALIGNMENTS = config["alignments"]

# User-defined region in form of "{chrom}-{start}-{end}"
REGION = config["region"]

# Convert filesystem-safe filename of "chrom-start-end" to the more-standard
# region of "chrom:start-end"
STANDARD_REGION = REGION.replace("-", ":", 1)

# Calculate the size of the given region of format "chrom-start-end" by
# splitting the region on "-", selecting the last two elements, reversing their
# order to produce (end, start), converting strings to integers, and applying
# the subtraction operator.
REGION_SIZE = str(operator.sub(*map(int, reversed(REGION.split("-")[1:3]))))

# Get reference slop to add prior to alignment of local assembly.
REFERENCE_SLOP = config["assembly"].get("reference_slop", 0)

#
# Define rules.
#

rule align_consensus_to_reference_region:
    input: "consensus.trimmed.fasta", "reference_region.fasta"
    output: "consensus_reference_alignment.sam"
    params: sge_opts="", mapping_quality_threshold=str(config["assembly"]["mapping_quality"]), alignment_parameters=config["assembly"]["alignment_parameters"]
    shell: """blasr {input} -clipping subread -out /dev/stdout -sam {params.alignment_parameters} | samtools view -q {params.mapping_quality_threshold} - | awk 'OFS="\\t" {{ sub(/:/, "-", $3); num_of_pieces=split($3, pieces, "-"); $3 = pieces[1]; $4 = pieces[2] + $4; print }}' > {output}"""

rule extract_reference_sequence:
    input: config["reference"], "reference_region.slop.txt"
    output: temp("reference_region.fasta")
    params: sge_opts=""
    shell: "samtools faidx {input[0]} `cat {input[1]}` > {output}"

rule extend_reference_region:
    input: bed="reference_region.bed", chromosomes=CHROMOSOME_LENGTHS
    output: "reference_region.slop.txt"
    params: sge_opts="", slop=str(REFERENCE_SLOP)
    shell: """bedtools slop -i {input.bed} -g {input.chromosomes} -b {params.slop} | awk '{{ print $1":"$2"-"$3 }}' > {output}"""

rule create_reference_region:
    output: "reference_region.bed"
    params: sge_opts=""
    shell: "echo {REGION} | sed 's/-/\\t/g' > {output}"

rule trim_consensus:
    input: "consensus.fasta"
    output: "consensus.trimmed.fasta"
    params: sge_opts=""
    shell: "{SNAKEMAKE_DIR}/../scripts/trim_lowercase.py {input} {output}"

rule quiver_assembly:
    input: assembly="assembly.fasta", alignments="alignment.cmp.h5", assembly_index="assembly.fasta.fai"
    output: "consensus.fasta"
    params: sge_opts="", threads="4"
    shell:
        "(unset QRSH_COMMAND && source $SMRT_ROOT/current/etc/setup.sh && quiver -j {params.threads} --referenceFilename {input.assembly} {input.alignments} -o {output}); "
        "sed -i 's/^>\(.\+\)/>{REGION}|\\1/' {output}; "

rule convert_assembly_alignments_to_hdf5:
    input: alignments="alignment.sam", assembly="assembly.fasta", reads="reads.bas.h5"
    output: "alignment.cmp.h5"
    params: sge_opts=""
    shell:
        "samtoh5 {input.alignments} {input.assembly} {output} -useShortRefName; "
        "(unset QRSH_COMMAND && source $SMRT_ROOT/current/etc/setup.sh && cmph5tools.py sort --deep {output}); "
        "loadPulses {input.reads} {output} -metrics InsertionQV,DeletionQV,SubstitutionQV,MergeQV,SubstitutionTag,DeletionTag; "
        "(unset QRSH_COMMAND && source $SMRT_ROOT/current/etc/setup.sh && {SNAKEMAKE_DIR}/../scripts/LoadGenericChemistry.py {BAS_TEMPLATE} {output})"

rule map_reads_to_assembly:
    input: "reads.bas.h5", "assembly.fasta"
    output: "alignment.sam"
    params: sge_opts="", threads="4"
    shell: "blasr {input} -sam -bestn 1 -out /dev/stdout -nproc {params.threads} | samtools view -F 0x4 -S - > {output}"

rule index_assembly:
    input: "assembly.fasta"
    output: "assembly.fasta.fai"
    params: sge_opts=""
    shell: "samtools faidx {input}"

rule assemble_reads:
    input: "reads.fastq"
    output: "assembly.fasta"
    params: sge_opts="-l mfree=4G -pe serial 2 -l disk_free=10G", threads="4", read_length="1000", partitions="50", max_runtime="45m"
    run:
        assembly_output = "local/9-terminator/asm.ctg.fasta"
        unitig_output = "local/9-terminator/asm.utg.fasta"
        assembly_exists = False

        try:
            shell("timeout {params.max_runtime} PBcR -threads {params.threads} -length {params.read_length} -partitions {params.partitions} -l local -s {CELERA_SPEC} -fastq {input} genomeSize={REGION_SIZE} assembleMinCoverage=5 &> assembly.log")
        except:
            shell("""echo -e "{REGION}\tassembly_crashed" >> %s""" % config["log"])

        if os.path.exists(assembly_output) and os.stat(assembly_output).st_size > 0:
            shell("cat {assembly_output} > {output}")
            shell("""echo -e "{REGION}\tassembly_exists" >> %s""" % config["log"])
            assembly_exists = True
        elif os.path.exists(unitig_output) and os.stat(unitig_output).st_size > 0:
            shell("cat {unitig_output} > {output}")
            shell("""echo -e "{REGION}\tunitig_assembly_exists" >> %s""" % config["log"])
            assembly_exists = True
        else:
            shell("""echo -e "{REGION}\tno_assembly_exists" >> %s""" % config["log"])

        # Create an empty assembly for failed regions.
        if not assembly_exists:
            shell("echo -e '>{REGION}\nN' > {output}")

rule convert_reads_to_bas:
    input: "reads.bam"
    output: "reads.bas.h5"
    params: sge_opts=""
    shell: "samtools view -h {input} | samtobas /dev/stdin {output}"

rule convert_reads_to_fastq:
    input: "reads.fasta"
    output: "reads.fastq"
    params: sge_opts=""
    shell: "{SNAKEMAKE_DIR}/../scripts/FastaToFakeFastq.py {input} {output}"

rule convert_reads_to_fasta:
    input: "reads.bam"
    output: "reads.fasta"
    params: sge_opts=""
    shell: """samtools view {input} | awk '{{ print ">"$1; print $10 }}' | {SNAKEMAKE_DIR}/../scripts/FormatFasta.py --fakename > {output}"""

rule convert_reads_to_bam:
    input: "reads.sam"
    output: "reads.bam"
    params: sge_opts=""
    shell: "samtools view -buS {input} > {output}"

rule get_reads:
    input: ALIGNMENTS
    output: "reads.sam"
    params: sge_opts="", mapping_quality_threshold=str(config["assembly"]["mapping_quality"]), max_delay=str(config["assembly"].get("minutes_to_delay_jobs", DEFAULT_MAX_DELAY))
    shell:
        "sleep $[ ( $RANDOM % {params.max_delay} ) ]m; "
        "head -n 1 {input} | xargs -i samtools view -H {{}} > {output}; "
        "cat {input} | xargs -i samtools view -q {params.mapping_quality_threshold} {{}} {STANDARD_REGION} >> {output}"
