"""
Rules for local assembly of genomic regions.
"""
import csv
import os

print("Local assembly with MHAP/Celera")

#
# Inputs:
#  1. Text file with a list of absolute paths for BAMs with reads for assembly
#  2. BED file with a list of regions to assemble
#
# For signature-based SV calling, the list of regions is based on signatures of
# SVs. For the tiled-based SV calling, the regions are sliding windows across
# the entire genome.

# Load regions to assemble.
if config.get("assembly") and config["assembly"].get("regions_to_assemble"):
    with open(config["assembly"]["regions_to_assemble"], "r") as fh:
        REGIONS_TO_ASSEMBLE = ["-".join(line.rstrip().split("\t")[:3]) for line in fh if line.rstrip()]
else:
    REGIONS_TO_ASSEMBLE = []

#
# Define internal constants.
#
ASSEMBLY_DIR = "mhap_assembly"
OVERLAPPING_ASSEMBLY_DIR = "mhap_overlapping_assembly"

BLASR_BIN = config["blasr_bin"]
BIN_DIR = config["mhap_celera"]["bin_dir"]
CADIR = config["mhap_celera"]["celera_dir"]

#
# Define helper functions.
#
def _get_overlapping_assembly_outputs(wildcards):
    if os.path.exists("overlapping_assemblies.bed"):
        with open("overlapping_assemblies.bed") as fh:
            reader = csv.reader(fh, delimiter="\t")
            return ["%s/%s-%s-%s/contigs_reference_alignment.sam" % (OVERLAPPING_ASSEMBLY_DIR, row[0], row[1], row[2]) for row in reader]
    else:
        return []

#
# Settings for rules
#

localrules: get_fasta_for_overlapping_region, get_fastq_for_overlapping_region, get_celera_fragments_for_overlapping_region, extract_reference_sequence

#
# Define rules.
#
rule assemble_with_mhap:
    input: "merged_assemblies.fasta.fai"
    params: sge_opts=""

# Index local assemblies FASTA.
rule index_fasta_from_assemblies:
    input: "merged_assemblies.fasta"
    output: "merged_assemblies.fasta.fai"
    params: sge_opts=""
    shell: "samtools faidx {input}"

# Create FASTA from assemblies BAM.
rule create_fasta_from_assemblies:
    input: "merged_assemblies.bam"
    output: "merged_assemblies.fasta"
    params: sge_opts=""
    shell: """samtools view {input} | sed 's/\/0_[0-9]\+//' | awk 'OFS="\\t" {{ print ">"$1; print $10 }}' > {output}"""

#
# Collect assemblies.
#

rule merge_overlapping_and_nonoverlapping_alignments:
    input: "overlapping_assemblies.bam", "nonoverlapping_assemblies.bam"
    output: "merged_assemblies.bam"
    params: sge_opts=""
    shell: "samtools merge {output} {input}"

#
# Analyze overlapping local assemblies.
#

rule collect_overlapping_assembly_alignments:
    input: regions="overlapping_assemblies.bed", chromosomes=config["reference"]["chromosome_lengths"], reference=config["reference"]["assembly"], alignments=_get_overlapping_assembly_outputs
    output: "overlapping_assemblies.bam"
    params: sge_opts="-l mfree=10G"
    run:
        list_filename = output[0].replace("bam", "list.txt")
        with open(list_filename, "w") as oh:
            for i in input.alignments:
                oh.write("%s\n" % i)

        shell("""mkdir -p {TMP_DIR}; while read file; do cat $file; done < %s | samtools view -Sbu -t {input.chromosomes} - | bamleftalign -f {input.reference} | samtools sort -O bam -T {TMP_DIR}/{output} -o {output}""" % list_filename)

rule align_consensus_to_reference_region:
    input: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/assembly.fasta", "{OVERLAPPING_ASSEMBLY_DIR}/{region}/reference_region.fasta"
    output: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs_reference_alignment.sam"
    params: sge_opts="-l mfree=2G"
    shell: """{BLASR_BIN} {input} -clipping subread -affineAlign -affineOpen 100 -affineExtend 0 -insertion 0 -deletion 0 -out /dev/stdout -bestn 1 -sam -maxMatch 50 | samtools view - | awk 'OFS="\\t" {{ sub(/:/, "-", $3); num_of_pieces=split($3, pieces, "-"); $3 = pieces[1]; $4 = pieces[2] + $4; print }}' | awk 'OFS="\\t" {{ $1=$3"-"$4"-"$4+length($10)"|"$1"|merged"; print }}' > {output}"""

rule extract_reference_sequence:
    input: chromosomes=config["reference"]["chromosome_lengths"], reference=config["reference"]["assembly"]
    output: temp("{OVERLAPPING_ASSEMBLY_DIR}/{region}/reference_region.fasta")
    params: sge_opts="", slop="50000"
    shell: """echo {wildcards.region} | sed 's/-/\\t/g' | bedtools slop -i stdin -g {input.chromosomes} -b {params.slop} | awk '{{ print $1":"$2"-"$3 }}' | xargs -i samtools faidx {input.reference} {{}} > {output}"""

rule assemble_overlapping_region:
    input: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs.frg"
    output: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/assembly.fasta"
    # Limit run time of the assembly to 2 hours to prevent long-running assembly
    # of overly difficult regions.
    params: sge_opts="-l mfree=4G -pe serial 4 -l disk_free=10G", threads="4"
    run:
        assembly_region_dir = "%s/%s" % (OVERLAPPING_ASSEMBLY_DIR, wildcards.region)
        assembly_output_dir = "%s/local" % assembly_region_dir
        assembly_output = "%s/9-terminator/region.utg.fasta" % assembly_output_dir
        assembly_exists = False
        try:
            shell(". config.sh; {CADIR}/runCA -p region -d {assembly_output_dir} {input} ovlThreads={params.threads} doOverlapBasedTrimming=0 doDeDuplication=0 &> {assembly_region_dir}/assembly.log")
            if os.path.exists(assembly_output):
                shell("cp {assembly_output} {output}")
                shell("""echo -e "{wildcards.region}\tassembly_exists" >> %s""" % config["assembly"]["log"])
                assembly_exists = True
            else:
                shell("""echo -e "{wildcards.region}\tno_assembly_exists" >> %s""" % config["assembly"]["log"])
        except Exception as error:
            shell("""echo -e "{wildcards.region}\tassembly_crashed\t`grep ERROR assembly.log | tr '\n' '|'`\t%s" >> %s""" % (error, config["assembly"]["log"]))

        # Use the original assemblies if the meta-assembly failed.
        if not assembly_exists:
            shell("cat `echo {input} | sed 's/.frg/.fasta/'` > {output}")

rule get_celera_fragments_for_overlapping_region:
    input: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs.fastq"
    output: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs.frg"
    params: sge_opts=""
    shell: "{CADIR}/fastqToCA -libraryname region -technology pacbio-corrected -reads {input} > {output}"

rule get_fastq_for_overlapping_region:
    input: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs.fasta"
    output: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs.fastq"
    params: sge_opts=""
    shell: "scripts/FastaToFakeFastq.py {input} {output}"

rule get_fasta_for_overlapping_region:
    input: regions="overlapping_assemblies.bed", assemblies="local_assemblies.fasta"
    output: "{OVERLAPPING_ASSEMBLY_DIR}/{region}/contigs.fasta"
    params:
        sge_opts="",
        chrom=lambda wildcards: wildcards["region"].split("-")[0],
        start=lambda wildcards: wildcards["region"].split("-")[1],
        end=lambda wildcards: wildcards["region"].split("-")[2]
    shell: """awk '$1 == "{params.chrom}" && $2 == {params.start} && $3 == {params.end}' {input.regions} | cut -f 5 | tr ',' '\\n' | while read contig; do samtools faidx {input.assemblies} "$contig"; done > {output}"""

#
# Analyze non-overlapping local assemblies.
#

# Extract alignments for non-overlapping assemblies.
rule extract_nonoverlapping_assembly_alignments:
    input: alignments="local_assembly_alignments.bam", regions="nonoverlapping_assemblies.bed", chromosomes=config["reference"]["chromosome_lengths"]
    output: "nonoverlapping_assemblies.bam"
    params: sge_opts=""
    shell: "samtools view {input.alignments} | sort -k 1,1 | join -1 5 -2 1 {input.regions} /dev/stdin | sed 's/\s\+/\\t/g' | cut -f 1,6- | samtools view -Sbu -t {input.chromosomes} - | samtools sort -O bam -T {TMP_DIR}/{output} -o {output}"

# Partition non-overlapping assemblies.
rule find_nonoverlapping_assemblies:
    input: "local_assembly_overlaps.bed"
    output: "nonoverlapping_assemblies.bed"
    params: sge_opts=""
    shell: "awk '$4 == 1' {input} | sort -k 5,5 > {output}"

# Partition overlapping assemblies.
rule find_overlapping_assemblies:
    input: "local_assembly_overlaps.bed"
    output: "overlapping_assemblies.bed"
    params: sge_opts=""
    shell: "awk '$4 > 1' {input} | sed '/random/d;/chrUn/d;/chrM/d;/chrY/d' > {output}"

# Identify overlapping assemblies.
rule find_assembly_overlaps:
    input: "local_assembly_alignments.bam"
    output: "local_assembly_overlaps.bed"
    params: sge_opts=""
    shell: "bedtools bamtobed -i {input} | awk '$5 > 0' | sed 's/\/0_[0-9]\+//' | bedtools merge -i stdin -d 1 -c 4,4 -o count_distinct,distinct > {output}"

# Get FASTA for assemblies.
rule build_local_assemblies_fasta:
    input: "local_assembly_alignments.bam"
    output: "local_assemblies.fasta"
    params: sge_opts=""
    shell: """samtools view {input} | awk 'OFS="\\t" {{ print ">"$1; print $10 }}' > {output}"""

# Collect assemblies.
rule collect_assembly_alignments:
    input: alignments=expand("mhap_assembly/{region}/consensus_reference_alignment.sam", region=REGIONS_TO_ASSEMBLE), chromosome_lengths=config["reference"]["chromosome_lengths"], reference=config["reference"]["assembly"]
    output: "local_assembly_alignments.bam"
    params: sge_opts="-l mfree=30G"
    run:
        list_filename = output[0].replace("bam", "list.txt")
        with open(list_filename, "w") as oh:
            for i in input.alignments:
                oh.write("%s\n" % i)

        shell("""mkdir -p {TMP_DIR}; while read file; do sed 's/\/0_[0-9]\+//' $file; done < %s | awk 'OFS="\\t" {{ $4 = $4 + 1; print }}' | samtools view -Sbu -t {input.chromosome_lengths} - | bamleftalign -f {input.reference} | samtools sort -O bam -T {TMP_DIR}/{output} -o {output}""" % list_filename)

# TODO: remove dependencies on mchaisso's scripts (*.py) and Celera installation.
# TODO: remove dependencies on Eichler modules.
rule assemble_region:
    input: "alignments.fofn"
    output: "{ASSEMBLY_DIR}/{region}/consensus_reference_alignment.sam"
    # Limit run time of the assembly to 2 hours to prevent long-running assembly
    # of overly difficult regions.
    params: sge_opts="-l mfree=3G -pe serial 4 -l disk_free=10G -l h_rt=02:00:00"
    shell:
        "export ANALYSIS_DIR=`pwd`; "
        "mkdir -p {TMP_DIR}/{wildcards.region}; "
        "pushd {TMP_DIR}/{wildcards.region}; "
        "rsync $ANALYSIS_DIR/config.json {TMP_DIR}/{wildcards.region}/; "
        "snakemake -s $ANALYSIS_DIR/rules/local_assembly.mhap_celera_single_assembly.rules --config alignments=$ANALYSIS_DIR/{input} region={wildcards.region}; "
        "popd; "
        "rsync -ra {TMP_DIR}/{wildcards.region} {ASSEMBLY_DIR}/; "
        "rm -rf {TMP_DIR}/{wildcards.region}"
