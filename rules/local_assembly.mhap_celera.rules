"""
Rules for local assembly of genomic regions.
"""
import operator
import os

print("Local assembly with MHAP/Celera")

#
# Inputs:
#  1. Text file with a list of absolute paths for BAMs with reads for assembly
#  2. BED file with a list of regions to assemble
#
# For signature-based SV calling, the list of regions is based on signatures of
# SVs. For the tiled-based SV calling, the regions are sliding windows across
# the entire genome.

# Load regions to assemble.
if config.get("assembly") and config["assembly"].get("regions_to_assemble"):
    with open(config["assembly"]["regions_to_assemble"], "r") as fh:
        REGIONS_TO_ASSEMBLE = ["-".join(line.rstrip().split("\t")[:3]) for line in fh]
else:
    REGIONS_TO_ASSEMBLE = []

CADIR = config["mhap_celera"]["celera_dir"]
BIN_DIR = config["mhap_celera"]["bin_dir"]
CELERA_SPEC = config["mhap_celera"]["celera_spec"]
BAS_TEMPLATE = config["mhap_celera"]["bas_template"]

#
# Define internal constants.
#
ASSEMBLY_DIR = "sv_assembly"

#
# Define utility functions.
#

def _get_bamtools_region(wildcards):
    """
    Convert filesystem-safe filename of "chrom-start-end" to a bamtools-specific region of "chrom:start..end"
    """
    return wildcards["region"].replace("-", ":", 1).replace("-", "..", 1)

def _get_standard_region(wildcards):
    """
    Convert filesystem-safe filename of "chrom-start-end" to the more-standard region of "chrom:start-end"
    """
    return wildcards["region"].replace("-", ":", 1)

def _get_region_size(wildcards):
    """
    Calculate the size of the given region of format "chrom-start-end" by
    splitting the region on "-", selecting the last two elements, reversing
    their order to produce (end, start), converting strings to integers, and
    applying the subtraction operator.
    """
    return str(operator.sub(*map(int, reversed(wildcards["region"].split("-")[1:3]))))

#
# Define rules.
#

# Collect assemblies.
rule collect_assemblies:
    input: expand("mhap_assembly/{region}/consensus.fasta", region=REGIONS_TO_ASSEMBLE)
    output: "sv_assemblies.txt"
    params: sge_opts=""
    # TODO: create module for Celera scripts
    shell: "find {input} > {output}"

# TODO: remove dependencies on mchaisso's scripts (*.py) and Celera installation.
# TODO: remove dependencies on Eichler modules.
rule assemble_region:
    input: "alignments.fofn"
    output: "mhap_assembly/{region}/consensus.fasta"
    # Limit run time of the assembly to 2 hours to prevent long-running assembly
    # of overly difficult regions..
    params: sge_opts="-l mfree=2G -pe serial 4 -l disk_free=10G -l h_rt=02:00:00", region=_get_standard_region, region_size=_get_region_size, mapping_quality_threshold=str(config["assembly"]["mapping_quality"]), threads="4", read_length="1000", partitions="50"
    shell:
        "mkdir -p {TMP_DIR}/{wildcards.region}; "
        "pushd {TMP_DIR}/{wildcards.region}; "
	"head -n 1 {input} | xargs -i samtools view -H {{}} > reads.sam; "
	"cat {input} | xargs -i samtools view -q {params.mapping_quality_threshold} {{}} {params.region} >> reads.sam; "
        "samtools view -bS reads.sam > reads.bam; "
        """samtools view reads.bam | awk '{{ print ">"$1; print $10 }}' | /net/eichler/vol5/home/mchaisso/projects/PacBioSequencing/scripts/falcon/FormatFasta.py --fakename  > reads.fasta"""
	"{BIN_DIR}/FastaToFakeFastq.py reads.fasta reads.fastq; "
	"module load perl/latest && module load java/8u25 && {CADIR}/PBcR -threads {params.threads} -length {params.read_length} -partitions {params.partitions} -l local -s {CELERA_SPEC} -fastq reads.fastq genomeSize={params.region_size}; "
	"cp local/9-terminator/asm.ctg.fasta assembly.fasta; "
	"samtools view -h reads.bam | samtobas /dev/stdin reads.bas.h5; "
	"blasr reads.bas.h5 assembly.fasta -sam -bestn 1 -out alignment.sam -nproc {params.threads}; "
	"samtoh5 alignment.sam assembly.fasta alignment.cmp.h5 -useShortRefName; "
	"unset QRSH_COMMAND && source /net/eichler/vol5/home/mchaisso/scripts/setup_pacbio.sh && cmph5tools.py sort --deep alignment.cmp.h5; "
	"loadPulses reads.bas.h5 alignment.cmp.h5 -metrics InsertionQV,DeletionQV,SubstitutionQV,MergeQV,SubstitutionTag,DeletionTag; "
	"unset QRSH_COMMAND && source /net/eichler/vol5/home/mchaisso/scripts/setup_pacbio.sh && {BIN_DIR}/local_assembly/LoadGenericChemistry.py {BAS_TEMPLATE} alignment.cmp.h5; "
	"samtools faidx assembly.fasta; "
	"unset QRSH_COMMAND && source /net/eichler/vol5/home/mchaisso/scripts/setup_pacbio.sh && quiver -j {params.threads} --referenceFilename assembly.fasta alignment.cmp.h5 -o consensus.fasta; "
        "sed -i 's/^>\(.\+\)/>{wildcards.region}|\1/' consensus.fasta;"
        "popd; "
        "rsync -r {TMP_DIR}/{wildcards.region} sv_assembly/;"
        "rm -rf {TMP_DIR}/{wildcards.region}"
