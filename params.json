{
  "name": "SMRT-SV",
  "tagline": "Structural variant and indel caller for PacBio reads",
  "body": "# SMRT-SV\r\n\r\nStructural variant (SV) and indel caller for PacBio reads based on methods from\r\n[Chaisson et\r\nal. 2014](http://www.nature.com/nature/journal/vaop/ncurrent/full/nature13907.html).\r\n\r\n## Installation\r\n\r\nSMRT-SV requires git, Python (2.6.6 or later) and Perl (5.10.1 or later) for\r\ninstallation.\r\n\r\nSMRT-SV has been tested on CentOS 6.8 and should work with most Linux-style\r\ndistributions.\r\n\r\n### Get the code\r\n\r\nClone the repository into your desired installation directory and build SMRT-SV\r\ndependencies.\r\n\r\n```bash\r\nmkdir /usr/local/smrtsv\r\ncd /usr/local/smrtsv\r\ngit clone --recursive git@github.com:EichlerLab/pacbio_variant_caller.git .\r\nmake\r\n```\r\n\r\nNote that some dependencies (e.g., RepeatMasker) require hardcoded paths to this\r\ninstallation directory. If you need to move SMRT-SV to another directory, it is\r\neasier to change to that directory, clone the repository, and rebuild the\r\ndependencies there.\r\n\r\n### Test installation\r\n\r\nAdd the installation directory to your path.\r\n\r\n```bash\r\nexport PATH=/usr/local/smrtsv:$PATH\r\n```\r\n\r\nPrint SMRT-SV help to confirm installation.\r\n\r\n```bash\r\nsmrtsv.py --help\r\n```\r\n\r\nAlternately, run `smrtsv.py` directly from the installation directory.\r\n\r\n```bash\r\n/usr/local/smrtsv/bin/smrtsv.py --help\r\n```\r\n\r\n## Configure distributed environment\r\n\r\nSMRT-SV uses DRMAA to submit jobs to a grid-engine-style cluster. To enable the `--distribute` option of SMRT SV, add the following line to your `.bash_profile` with the correct path to the DRMAA library for your cluster.\r\n\r\n```bash\r\nexport DRMAA_LIBRARY_PATH=/opt/uge/lib/lx-amd64/libdrmaa.so.1.0\r\n```\r\n\r\nAlternately, provide the path to your DRMAA library with the SMRT-SV\r\n`--drmaalib` option.\r\n\r\nAdditionally, you may need to configure resource requirements depending on your\r\ncluster and PacBio data. Use the `--cluster_config` option when running SMRT-SV\r\nto pass a JSON file that specifies [Snakemake-style cluster\r\nparameters](https://bitbucket.org/snakemake/snakemake/wiki/Documentation#markdown-header-cluster-configuration). An\r\nexample configuration used to run SMRT-SV with human genomes on the Eichler lab\r\ncluster is provided in this repository in the file `cluster.eichler.json`.\r\n\r\n## Tutorial\r\n\r\nThe following tutorial shows how to call structural variants and indels in\r\nyeast.\r\n\r\n### Download PacBio reads\r\n\r\n```bash\r\n# List of AWS-hosted files from PacBio including raw reads and an HGAP assembly.\r\nwget https://gist.githubusercontent.com/pb-jchin/6359919/raw/9c172c7ff7cbc0193ce89e715215ce912f3f30e6/gistfile1.txt\r\n\r\n# Keep only .xml, .bas.h5, and .bax.h5 files.\r\nsed '/fasta/d;/fastq/d;/celera/d;/HGAP/d' gistfile1.txt > gistfile1.keep.txt\r\n\r\n# Download data into a raw reads directory.\r\nmkdir -p raw_reads\r\ncd raw_reads\r\nfor f in `cat ../gistfile1.keep.txt`; do wget --force-directories $f; done\r\n\r\n# Create a list of reads for analysis.\r\ncd ..\r\nfind ./raw_reads -name \"*.bax.h5\" -exec readlink -f {} \\; > reads.fofn\r\n```\r\n\r\n### Prepare the reference assembly\r\n\r\nDownload the reference assembly (sacCer3) from UCSC.\r\n\r\n```bash\r\nmkdir -p reference\r\ncd reference\r\nwget ftp://hgdownload.cse.ucsc.edu/goldenPath/sacCer3/bigZips/chromFa.tar.gz\r\n```\r\n\r\nUnpack the reference tarball and concatenate individual chromosome files into a\r\nsingle reference FASTA file.\r\n\r\n```bash\r\ntar zxvf chromFa.tar.gz\r\ncat *.fa > sacCer3.fasta\r\nrm -f *.fa *.gz\r\ncd ..\r\n```\r\n\r\nPrepare the reference sequence for alignment with PacBio reads. This step\r\nproduces suffix array and ctab files used by BLASR to speed up alignments.\r\n\r\n```bash\r\nsmrtsv.py index reference/sacCer3.fasta\r\n```\r\n\r\n### Align reads to the reference\r\n\r\nAlign reads to the reference with BLASR.\r\n\r\n```bash\r\nsmrtsv.py align reference/sacCer3.fasta reads.fofn\r\n```\r\n\r\n### Find signatures of variants in raw reads\r\n\r\nFind candidate regions to search for SVs based on SV signatures.\r\n\r\n```bash\r\nsmrtsv.py detect reference/sacCer3.fasta alignments.fofn candidates.bed\r\n```\r\n\r\n### Assemble regions\r\n\r\nAssemble local regions of the genome that have SV signatures or tile across the\r\ngenome.\r\n\r\n```bash\r\nsmrtsv.py assemble reference/sacCer3.fasta reads.fofn alignments.fofn candidates.bed local_assembly_alignments.bam\r\n```\r\n\r\n### Call variants\r\n\r\nCall variants by aligning tiled local assemblies back to the\r\nreference. Optionally, specify the sample name for annotation of the final VCF\r\nfile and a species name (common or scientific as supported by\r\n[RepeatMasker](http://www.repeatmasker.org/)) for repeat masking of structural\r\nvariants.\r\n\r\n```bash\r\nsmrtsv.py call reference/sacCer3.fasta alignments.fofn local_assembly_alignments.bam variants.vcf --sample UCSF_Yeast9464 --species yeast\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}